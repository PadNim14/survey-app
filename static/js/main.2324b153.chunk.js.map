{"version":3,"sources":["reportWebVitals.js","config.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Survey","applyTheme","surveyJSON","title","description","completedHtml","pages","name","elements","type","isRequired","requiredErrorText","defaultValue","expression","date","Date","survey","a","console","log","data","collection","where","get","query","empty","forEach","doc","id","add","overall_feeling","JSON","stringify","sleep_quality","lung_swelling","breathing","stomach_condition","headache","pulse","chest_pain","risk_score","toString","catch","error","update","priority","ReactDOM","render","json","onComplete","document","getElementById"],"mappings":"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","file":"static/js/main.2324b153.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/firestore\";\r\n//import \"firebase/compat/credentials\";\r\n//import \"firebase/auth\";\r\n//import \"firebase/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDKq7ac8s-ZlpDmlShbqgPAOzio-zKA-3I\",\r\n  authDomain: \"hit-with-database.firebaseapp.com\",\r\n  projectId: \"hit-with-database\",\r\n  storageBucket: \"hit-with-database.appspot.com\",\r\n  messagingSenderId: \"674336402509\",\r\n  appId: \"1:674336402509:web:de9c2fecaf15c008aa8004\",\r\n  measurementId: \"G-D6VXTFGF0R\"\r\n};\r\n\r\nconst firebaseInitial = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseInitial.firestore();\r\n\r\nexport { firebaseInitial, db };","import React from 'react';\r\nimport ReactDOM, { createPortal } from 'react-dom';\r\n// import App from './App';\r\nimport './index.css';\r\nimport \"survey-react/survey.css\";\r\nimport * as Survey from \"survey-react\";\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {firebaseInitial, db} from './config.js';\r\n\r\nSurvey.StylesManager.applyTheme(\"darkrose\");\r\n// TODO: if no symptoms, then assign empty to 0 -> calculate risk score\r\n// TODO: make comments optional\r\n\r\nvar surveyJSON = {title:\"ACS Symptom Checklist\",description:\"Select 1 if you strongly disagree with the statement; click 5 if you strongly agree with the statement. Otherwise, rate your answer accordingly.\",completedHtml:\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n    <head>\\n        <h1>Thank you for completing the survey </h1>\\n        <a href=\\\"https://padnim14.github.io/survey-app/\\\"> Take survey again </a>\\n    </head>\\n</html>\",\r\npages:[{name:\"page1\",\r\nelements:[{type:\"text\",name:\"question16\",title:\"Please enter your name (first name & last name)\",isRequired:true,requiredErrorText:\"Please enter your first and last name.\\n\\n\"},\r\n{type:\"rating\",name:\"question1\",title:\"How do you feel today?\",defaultValue:0},\r\n{type:\"rating\",name:\"question2\",title:\"Did you sleep well last night?\",defaultValue:0},\r\n{type:\"rating\",name:\"question3\",title: \"How do you rate the swelling in your lungs?\",defaultValue:0},\r\n{type:\"rating\",name:\"question4\",title:\"How is your breathing?\",defaultValue:0},\r\n{type:\"rating\",name:\"question5\",title:\"How is your stomach?\",defaultValue:0},\r\n{type:\"rating\",name:\"question6\",title:\"How does your head feel?\",defaultValue:0},\r\n{type:\"rating\",name:\"question7\",title:\"How is your pulse?\",defaultValue:0},\r\n{type:\"rating\",name:\"question8\",title:\"How does your chest feel?\",defaultValue:0},\r\n\r\n{type:\"expression\", name:\"risk score\", title:\"Your Risk Score:\", expression:\"{question1} + {question2} + {question3} + {question4} + {question5} + {question6} + {question7} + {question8} + {question9} + {question10} + {question11} + {question12} + {question13}\"}],\r\ntitle:\"ACS Symptom Checklist\",description:\"Please indicate all symptoms that you are currently experiencing or experienced before you called 911 today or came to the Emergency Department today.\"}],\r\ndate: new Date()}\r\n\r\nasync function sendDataToServer(survey) {\r\n    //survey.sendResult('398b1917-1d7b-4c0f-b910-0deb09e4c1e3');\r\n    //console.log(\"Survey results: \" + JSON.stringify(survey.data[\"question1\"]));\r\n    //var riskscore = 0;\r\n    //console.log(\"Survey results: \" + JSON.stringify(survey.data[\"question1\"]));\r\n    //var data = survey.data;\r\n\r\n    // first try to find the patient associated with this survey in the database\r\n\r\n    console.log(\"Searching for: \" + survey.data[\"question16\"]);\r\n\r\n    const collection = db.collection('patients');\r\n    const query = await collection.where('name', '==', survey.data[\"question16\"]).get();\r\n\r\n    console.log(\"Query done\");\r\n\r\n    // if not found, return an error message and don't write anything\r\n    if (query.empty) {\r\n        console.log(\"Patient not found!\");\r\n    } else {\r\n        console.log(\"query not empty?\");\r\n        // if found, write to a subcollection of survey results under the patient doc\r\n        query.forEach( doc => {\r\n\r\n            db.collection('patients').doc(doc.id).collection(\"surveys\").add({\r\n                overall_feeling: JSON.stringify(survey.data[\"question1\"]),\r\n                sleep_quality: JSON.stringify(survey.data[\"question2\"]),\r\n                lung_swelling: JSON.stringify(survey.data[\"question3\"]),\r\n                breathing: JSON.stringify(survey.data[\"question4\"]),\r\n                stomach_condition: JSON.stringify(survey.data[\"question5\"]),\r\n                headache: JSON.stringify(survey.data[\"question6\"]),\r\n                pulse: JSON.stringify(survey.data[\"question7\"]),\r\n                chest_pain: JSON.stringify(survey.data[\"question8\"]),\r\n                risk_score: JSON.stringify(survey.data[\"risk score\"]),\r\n                date: JSON.stringify(new Date().toString())\r\n            })\r\n            .then(() => {\r\n                console.log(\"Checkpoint: Document successfully written!\");\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n            //update priority according to this risk score\r\n            if (survey.data[\"risk score\"] < 15) {\r\n                db.collection('patients').doc(doc.id).update({priority: 3});\r\n            } else if (survey.data[\"risk score\"] < 25) {\r\n                db.collection('patients').doc(doc.id).update({priority: 2});\r\n            } else if (survey.data[\"risk score\"] < 41) {\r\n                db.collection('patients').doc(doc.id).update({priority: 1});\r\n            } else {\r\n                db.collection('patients').doc(doc.id).update({priority: 0});\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Survey.Survey json={ surveyJSON } onComplete={ sendDataToServer } />, document.getElementById(\"surveyContainer\"));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}